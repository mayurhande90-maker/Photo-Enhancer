/**
 * @file Firestore Security Rules for PhotoCraft AI
 * @description This ruleset enforces a strict user-ownership model, ensuring that only authenticated users can access their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, which enforces path-based access control.
 *  - /users/{userId}: Stores user profile information.
 *  - /users/{userId}/creditBalance: Stores the user's credit balance.
 *  - /users/{userId}/subscription: Stores the user's subscription details.
 *  - /users/{userId}/generatedImages/{imageId}: Stores images generated by the user.
 *
 * Key Security Decisions:
 * - No public listing of users or their data is allowed. Only the authenticated user can access their information.
 * - Write access to user data is restricted to the owning user, ensuring data privacy and integrity.
 * - The rules are designed to prevent unauthorized modifications or deletion of user data.
 *
 * Denormalization for Authorization:
 * The data model places user-specific collections under the /users/{userId} path. This allows for simple, performant rules based on request.auth.uid and the userId path parameter, avoiding costly get() calls.
 *
 * Structural Segregation:
 * All user-specific data (profile, credits, subscription, images) is kept separate under the /users/{userId} path, preventing accidental exposure of private information. No public collections are used.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the /users/{userId} document, ensuring only the authenticated user can read/write their profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile document.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile document for user 'user_abc'.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, update, and delete their own profile document.
     * @deny (get, list, update, delete) - User with UID 'user_xyz' cannot read, update, or delete user 'user_abc's profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      //Utility function
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Protects the /users/{userId}/creditBalance document, ensuring only the authenticated user can read/write their credit balance.
     * @path /users/{userId}/creditBalance
     * @allow (create) - User with UID 'user_abc' can create their credit balance document.
     * @deny (create) - User with UID 'user_xyz' cannot create a credit balance document for user 'user_abc'.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, update, and delete their own credit balance document.
     * @deny (get, list, update, delete) - User with UID 'user_xyz' cannot read, update, or delete user 'user_abc's credit balance.
     * @principle Enforces document ownership for all operations on user credit balances.
     */
    match /users/{userId}/creditBalance {
        //Utility function
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isOwner(userId) && resource != null;
        allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Protects the /users/{userId}/subscription document, ensuring only the authenticated user can read/write their subscription details.
     * @path /users/{userId}/subscription
     * @allow (create) - User with UID 'user_abc' can create their subscription document.
     * @deny (create) - User with UID 'user_xyz' cannot create a subscription document for user 'user_abc'.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, update, and delete their own subscription document.
     * @deny (get, list, update, delete) - User with UID 'user_xyz' cannot read, update, or delete user 'user_abc's subscription.
     * @principle Enforces document ownership for all operations on user subscriptions.
     */
    match /users/{userId}/subscription {
        //Utility function
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isOwner(userId) && resource != null;
        allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Protects the /users/{userId}/generatedImages/{imageId} document, ensuring only the authenticated user can read/write their generated images.
     * @path /users/{userId}/generatedImages/{imageId}
     * @allow (create) - User with UID 'user_abc' can create a generated image document under their user ID.
     * @deny (create) - User with UID 'user_xyz' cannot create a generated image document for user 'user_abc'.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, update, and delete their own generated image document.
     * @deny (get, list, update, delete) - User with UID 'user_xyz' cannot read, update, or delete user 'user_abc's generated image.
     * @principle Enforces document ownership for all operations on user generated images.
     */
    match /users/{userId}/generatedImages/{imageId} {
        //Utility function
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId) && resource != null;
        allow delete: if isOwner(userId) && resource != null;
    }
  }
}